{
	"info": {
		"_postman_id": "7c444511-3775-4e19-b9e0-780632197532",
		"name": "Final_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth0 + Create User + Get User",
			"item": [
				{
					"name": "Client Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"var body = JSON.parse(responseBody);",
									"",
									"tests[\"Client Access Token: \" + body.access_token] = true;",
									"",
									"postman.setEnvironmentVariable(\"client_token\", body.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/oauth",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"oauth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user cannot access all user accounts\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik4wUXhRVU5HUXpVM09ESTRNVGRFUWpaQ1JEQTJNMFZHUWpRNVFrTTNOME5HTXpNd05qTkVSZyJ9.eyJuaWNrbmFtZSI6Ijg0M2NiM2FkLWRmNTYtNGVjMi1iNWM3LWNmZDI4NjVhMDlkYiIsIm5hbWUiOiI4NDNjYjNhZC1kZjU2LTRlYzItYjVjNy1jZmQyODY1YTA5ZGJAZm9vLmNvbSIsInBpY3R1cmUiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9jZjZiOGUxZTU0NmIxOTQ5ZDY4ZTAwMzc3MTdlMDM3Zj9zPTQ4MCZyPXBnJmQ9aHR0cHMlM0ElMkYlMkZjZG4uYXV0aDAuY29tJTJGYXZhdGFycyUyRjg0LnBuZyIsInVwZGF0ZWRfYXQiOiIyMDE4LTExLTE5VDAxOjU5OjIwLjA4OFoiLCJlbWFpbCI6Ijg0M2NiM2FkLWRmNTYtNGVjMi1iNWM3LWNmZDI4NjVhMDlkYkBmb28uY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImlzcyI6Imh0dHBzOi8va3JhZnRtZS5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWJmMjBiMzUwZjliMTk3NDBkMTA5MzhjIiwiYXVkIjoiNDMyeENtUnJ6VFFaN1E1MXVnS1NXN0NpNmIyWDVuS0YiLCJpYXQiOjE1NDI1OTI3NjAsImV4cCI6MTU0MjYyODc2MH0.CL1tyvmeAWRXezGa9DCx9sZQMNVKO0qJJoejbe7eyyKnD7mSn81XP2GpZcGxiIeW0GfJiEuuFRZNxmi8JVR6ba7UWBU9nNdrTd07ZaP5Gnz7cxgOD9pUyT13t6-v7DCyPgdCZ_r_zAweQNyIzbocMEcTohMSc9QJHUS13qBJWQS3VmJG9xy4YRB_r_XkmBk8ML-cbulu8Ej4iaInmeJBU4Pd6_GIATGHOeA-e4MFvBVgIKkXTTqUjbe2EmW3BDxNQqA9a1viqa-4tNJzwFVv116dy3suBoN1Uh5tEhdZoAcHbNZUpL6cOOxCL1ZdO6ncdxdBq3FqEck58lJi_m810w",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var count = body.length;",
									"var array=[];",
									"  ",
									"// If there is an existing gist",
									"if(count > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < count; i++) {",
									"        array.push(body[i].user_id);",
									"    }",
									"}",
									"",
									"// Print number of gists found.",
									"tests[\"Found \" + count + \" user(s)\"] = true;",
									"    ",
									"if(count > 0){",
									"    // Set global variable for gist array",
									"    pm.globals.set(\"userArr\", array);",
									"",
									"    // Set global variable for number of gists",
									"    pm.globals.set(\"numUsers\", count);",
									"}",
									"else{",
									"    // Set global variable for gist array to null",
									"    pm.globals.set(\"userArr\", null);",
									"",
									"    // Set global variable for number of gists to 0",
									"    pm.globals.set(\"numUsers\", 0);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing client credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"password\": \"bar\"\n}\n"
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 409 Conflict: unsuccessful POST request, user already exists\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"foo\",\n  \"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"userID\", object.email);",
									"pm.globals.set(\"get-userID\", object.user_id);",
									"",
									"// Print ID of newly created gist",
									"tests[\"New, and now current, user is \" + pm.globals.get(\"userID\")] = true;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef80eb2f-9505-427d-aee1-b06113577564",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"password\": \"bar\"\n}\n"
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"userID_2\", object.email);",
									"pm.globals.set(\"get-userID_2\", object.user_id);",
									"",
									"// Print ID of newly created gist",
									"tests[\"Other user is \" + pm.globals.get(\"userID_2\")] = true;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef80eb2f-9505-427d-aee1-b06113577564",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"password\": \"bar\"\n}\n"
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm User Count Increment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var count = body.length;",
									"var array=[];",
									"  ",
									"// If there is an existing gist",
									"if(count > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < count; i++) {",
									"        array.push(body[i].user_id);",
									"    }",
									"}",
									"",
									"// Print number of gists found.",
									"tests[\"Found \" + count + \" user(s)\"] = count === pm.globals.get(\"numUsers\")+2;",
									"",
									"tests[\"Contains new user's email \"+pm.globals.get(\"userID\")] =  responseBody.has(pm.globals.get(\"userID\"));",
									"",
									"tests[\"Contains other user's email \"+pm.globals.get(\"userID_2\")] =  responseBody.has(pm.globals.get(\"userID_2\"));",
									"    ",
									"if(count > 0){",
									"    // Set global variable for gist array",
									"    pm.globals.set(\"userArr\", array);",
									"",
									"    // Set global variable for number of gists",
									"    pm.globals.set(\"numUsers\", count);",
									"}",
									"else{",
									"    // Set global variable for gist array to null",
									"    pm.globals.set(\"userArr\", null);",
									"",
									"    // Set global variable for number of gists to 0",
									"    pm.globals.set(\"numUsers\", 0);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authorization 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"tests[\"User ID Token: \" + object.id_token] = true;",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"auth0_token\", object.id_token);",
									"pm.globals.set(\"access_token\", object.access_token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{userID}}\",\n\t\"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/login",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authorization Other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"tests[\"User ID Token: \" + object.id_token] = true;",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"2_token\", object.id_token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{userID_2}}\",\n\t\"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/login",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user cannot access another user's account\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"    ",
									"tests[\"Correct user \" + body.email] = pm.globals.get(\"userID\") === body.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"    ",
									"tests[\"Correct user \" + body.email] = pm.globals.get(\"userID\") === body.email;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all Animals + Create Animal + Get an Animal",
			"item": [
				{
					"name": "Get All Animals ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Animals ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Animals ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Animals 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"var temp = [];",
									"",
									"// Parse JSON response",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/animals\");",
									"postman.setEnvironmentVariable(\"pag#\", 0);",
									"postman.setEnvironmentVariable(\"selfs\", 0);",
									"postman.setEnvironmentVariable(\"count\", 0);",
									"postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"postman.setNextRequest(\"Get All Animals 2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Animals 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body['items'].length);",
									"  ",
									"// If there is an existing gist",
									"if(body['items'].length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body['items'].length; i++) {",
									"        temp.push(body['items'][i].id);",
									"        ",
									"        if(body['items'][i].self !== 'undefined' && body['items'][i].self !== null && body['items'][i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body['next']) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body['next']);",
									"  postman.setNextRequest(\"Get All Animals 2\");",
									"}",
									"else{",
									"    // Print number of gists found.",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" animal(s)\"] = true;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each animal item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"        ",
									"    if(postman.getEnvironmentVariable(\"count\") > 0){",
									"        // Print gist ID at the top of the array stack",
									"        tests[\"Current animal ID is \" + JSON.parse(postman.getEnvironmentVariable(\"array\"))[0]] = true;",
									"    ",
									"        // Set global variable for gist array",
									"        pm.globals.set(\"animalArr\", JSON.parse(postman.getEnvironmentVariable(\"array\")));",
									"    ",
									"        // Set global variable for number of gists",
									"        pm.globals.set(\"numAnimals\", Number(postman.getEnvironmentVariable(\"count\")));",
									"    }",
									"    else{",
									"        // Set global variable for gist array to null",
									"        pm.globals.set(\"animalArr\", null);",
									"    ",
									"        // Set global variable for number of gists to 0",
									"        pm.globals.set(\"numAnimals\", 0);",
									"    }",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Create Animal ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: unsuccessful POST, missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"gorilla\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: unsuccessful POST, invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"gorilla\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"gorilla\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 409 Conflict: Unsuccessful POST request due to name conflict\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Simba\",\n\t\"species\": \"gorilla\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful POST request due to missing data\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"animalID\", object.id);",
									"",
									"// Print ID of newly created gist",
									"tests[\"New, and now current, animal ID is \" + pm.globals.get(\"animalID\")] = true;",
									"",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/animals\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"gorilla\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Animal Count Increment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a54ad2c4-6d5f-4c20-8c93-8343f71c1559",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body.next);",
									"  postman.setNextRequest(\"Confirm Animal Count Increment\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" animals(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) == pm.globals.get(\"numAnimals\")+1;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each animal item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Contains most recently created animal ID\"] = postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"animalID\"));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\"); i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"animalArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing animal ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") - 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"animalArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numAnimals\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Get an Animal ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						},
						"description": "Send GET requests to count number of Gists from my GitHub account. Test passes if count returned."
					},
					"response": []
				},
				{
					"name": "Get an Animal ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Animal ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Animal ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confrim correct status code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"object = JSON.parse(responseBody);",
									"",
									"// Test passes if response gist ID matches current global gist ID",
									"tests[\"Correct animal ID: \" + object[0].id] = object[0].id === pm.globals.get(\"animalID\"); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Animal",
			"item": [
				{
					"name": "Update Animal ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: Unsuccessful PUT, missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: Unsuccessful PUT, invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: Unsuccessful PUT, this animal is being kept in another user's enclosure\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Donald\",\n\t\"species\": \"duck\",\n\t\"age\": 5\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/5630121163620352",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"5630121163620352"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: Unsuccessful PUT, server only uses application/json\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([406]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 409 Conflict: Unsuccessful PUT request due to name conflict\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Simba\",\n\t\"species\": \"lion\",\n\t\"age\": 7\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful PUT request due to missing data\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful PUT request due to invalid animal ID\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/123412341234123t",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"123412341234123t"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal ERROR 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Not Found: Unsuccessful PUT, animal ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/1234123412341234",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"1234123412341234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 303 See Other: go to Location returned to view updated animal record\", function () {",
									"    pm.response.to.have.status(303);",
									"});",
									"",
									"tests[\"Location found: \" + postman.getResponseHeader(\"Location\")] = postman.getResponseHeader(\"Location\");",
									"",
									"postman.setEnvironmentVariable(\"loc_url\", postman.getResponseHeader(\"Location\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"name\": \"Lucy\",\n\t\"species\": \"chimpanzee\",\n\t\"age\": 9,\n\t\"enclosure\": null\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Updated Animal Contents w/ Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0186e052-2c32-451e-873a-e8feed860f13",
								"exec": [
									"// Confrim correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"object = JSON.parse(responseBody);",
									"",
									"// Test passes if response gist ID matches current global animal ID",
									"tests[\"Correct animal ID\"] = object[0].id === pm.globals.get(\"animalID\"); ",
									"",
									"// Test passes if file name and content matches file name and content of recently edited gist",
									"pm.test(\"Correct animal content\", function() {",
									"    if (object[0].name === \"Lucy\" && object[0].species === \"chimpanzee\" && object[0].age === 9 && object[0].enclosure === null){",
									"        return true;",
									"    }",
									"    else{",
									"\t    return false;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{loc_url}}",
							"host": [
								"{{loc_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Enclosures + Get User's Enclosures + Create User Enclosure",
			"item": [
				{
					"name": "Get All Enclosures ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Enclosures ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Enclosures ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Enclosures 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"var temp = [];",
									"",
									"// Parse JSON response",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/enclosures\");",
									"postman.setEnvironmentVariable(\"pag#\", 0);",
									"postman.setEnvironmentVariable(\"selfs\", 0);",
									"postman.setEnvironmentVariable(\"count\", 0);",
									"postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"postman.setNextRequest(\"Get All Enclosures 2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Enclosures 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"tests[\"Content-Type returned is \" + postman.getResponseHeader(\"Content-Type\")] = postman.getResponseHeader(\"Content-Type\"); ",
									"  ",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body.next);",
									"  postman.setNextRequest(\"Get All Enclosures 2\");",
									"}",
									"else{",
									"    // Print number of gists found.",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" enclosure(s)\"] = true;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"        ",
									"    if(postman.getEnvironmentVariable(\"count\") > 0){",
									"        // Print gist ID at the top of the array stack",
									"        tests[\"Current enclosure ID is \" + JSON.parse(postman.getEnvironmentVariable(\"array\"))[0]] = true;",
									"    ",
									"        // Set global variable for gist array",
									"        pm.globals.set(\"enclosureArr\", JSON.parse(postman.getEnvironmentVariable(\"array\")));",
									"    ",
									"        // Set global variable for number of gists",
									"        pm.globals.set(\"numEnclosures\", Number(postman.getEnvironmentVariable(\"count\")));",
									"    }",
									"    else{",
									"        // Set global variable for gist array to null",
									"        pm.globals.set(\"enclosureArr\", null);",
									"    ",
									"        // Set global variable for number of gists to ",
									"        pm.globals.set(\"numEnclosres\", 0);",
									"    }",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Get User's Enclosures ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: provided credentials do not have access to userID's enclosures\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"var temp = [];",
									"",
									"// Parse JSON response",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/users/{{userID}}/enclosures\");",
									"postman.setEnvironmentVariable(\"pag#\", 0);",
									"postman.setEnvironmentVariable(\"selfs\", 0);",
									"postman.setEnvironmentVariable(\"count\", 0);",
									"postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"postman.setNextRequest(\"Get User's Enclosures 2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{userID}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{userID}}",
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"tests[\"Content-Type returned is \" + postman.getResponseHeader(\"Content-Type\")] = postman.getResponseHeader(\"Content-Type\"); ",
									"  ",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body.next);",
									"  postman.setNextRequest(\"Get User's Enclosures 2\");",
									"}",
									"else{",
									"    // Print number of gists found.",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" enclosure(s)\"] = true;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"        ",
									"    if(postman.getEnvironmentVariable(\"count\") > 0){",
									"        // Print gist ID at the top of the array stack",
									"        tests[\"Current user enclosure ID is \" + JSON.parse(postman.getEnvironmentVariable(\"array\"))[0]] = true;",
									"    ",
									"        // Set global variable for gist array",
									"        pm.globals.set(\"userEnclosureArr\", JSON.parse(postman.getEnvironmentVariable(\"array\")));",
									"    ",
									"        // Set global variable for number of gists",
									"        pm.globals.set(\"numUserEnclosures\", Number(postman.getEnvironmentVariable(\"count\")));",
									"    }",
									"    else{",
									"        // Set global variable for gist array to null",
									"        pm.globals.set(\"userEnclosureArr\", null);",
									"    ",
									"        // Set global variable for number of gists to ",
									"        pm.globals.set(\"numUserEnclosures\", 0);",
									"    }",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Create User Enclosure ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: unsuccessful POST request, missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: unsuccessful POST request, invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 409 Conflict: enclosure number already exists\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"002\",\n\t\"type\": \"jungle\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: missing data\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"enclosureID\", object.id);",
									"pm.globals.set(\"userEnclosureID\", object.id);",
									"",
									"postman.setEnvironmentVariable(\"global_url\", \"{{app_base_url}}/enclosures\");",
									"",
									"postman.setEnvironmentVariable(\"user_url\", \"{{app_base_url}}/users/{{userID}}/enclosures\");",
									"",
									"// Print ID of newly created gist",
									"tests[\"New, and now current, user enclosure ID is \" + pm.globals.get(\"userEnclosureID\")] = true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 500\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Enclosure Count Increment Global",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a54ad2c4-6d5f-4c20-8c93-8343f71c1559",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"global_url\", body.next);",
									"  postman.setNextRequest(\"Confirm Enclosure Count Increment Global\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" enclosure(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) === pm.globals.get(\"numEnclosures\") + 1;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Contains most recently created enclosure ID\"] = postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureID\"));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\"); i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing enclosure ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") - 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"enclosureArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numEnclosures\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Confirm Enclosure Count Increment User\");",
									"    postman.setEnvironmentVariable(\"global_url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {},
						"url": {
							"raw": "{{global_url}}",
							"host": [
								"{{global_url}}"
							]
						},
						"description": "Send GET requests to count number of Gists from my GitHub account. Test passes if count returned."
					},
					"response": []
				},
				{
					"name": "Confirm Enclosure Count Increment User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a54ad2c4-6d5f-4c20-8c93-8343f71c1559",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"user_url\", body.next);",
									"  postman.setNextRequest(\"Confirm Enclosure Count Increment User\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" user's enclosure(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) === pm.globals.get(\"numUserEnclosures\") + 1;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Contains most recently created enclosure ID\"] = postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureID\"));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\"); i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"userEnclosureArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing uer's enclosure ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") - 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"userEnclosureArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numUserEnclosures\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Get an Enclosure ERROR 1\");",
									"    postman.setEnvironmentVariable(\"user_url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {},
						"url": {
							"raw": "{{user_url}}",
							"host": [
								"{{user_url}}"
							]
						},
						"description": "Send GET requests to count number of Gists from my GitHub account. Test passes if count returned."
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an Enclosure + Update Enclosure + Put Animal in Enclosure",
			"item": [
				{
					"name": "Get an Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing user credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only users application.json\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([406]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e920fb-288f-4723-bfea-156459aef12f",
								"exec": [
									"// Confrim correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Content-Type returned is \" + postman.getResponseHeader(\"Content-Type\")] = postman.getResponseHeader(\"Content-Type\"); ",
									"",
									"// Parse JSON response",
									"object = JSON.parse(responseBody);",
									"",
									"// Test passes if response gist ID matches current global gist ID",
									"tests[\"Correct enclosure ID: \" + object[0].id] = object[0].id == pm.globals.get(\"enclosureID\"); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba61560f-e601-45cf-8200-4c09b86481af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all Enclosures ERROR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 405 Method Not Allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 300\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all User's Enclosures ERROR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 405 Method Not Allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 300\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 409 Conflict: unsuccessful PUT, number conflict\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"002\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful PUT, missing data\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: unsuccessful PUT, invalid enclosure ID\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/123412341234123t",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"123412341234123t"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Not Found: Unsuccessful PUT, enclosure ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/1234123412341234",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"1234123412341234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclsoureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclsoureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user does not keep this enclosure\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure ERROR 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User's Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5fd2cd6-b0d6-49e9-9c86-d7dd6a3c3d1a",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 303 See Other: successful POST request, Location provided\", function () {",
									"    pm.response.to.have.status(303);",
									"});",
									"",
									"tests[\"Location found: \" + postman.getResponseHeader(\"Location\")] = postman.getResponseHeader(\"Location\");",
									"",
									"postman.setEnvironmentVariable(\"loc_url\", postman.getResponseHeader(\"Location\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"number\": \"001\",\n\t\"type\": \"jungle\",\n\t\"size\": 250\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Updated Enclosure Contents w/ Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0186e052-2c32-451e-873a-e8feed860f13",
								"exec": [
									"// Confrim correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"object = JSON.parse(responseBody);",
									"",
									"// Test passes if response gist ID matches current global gist ID",
									"tests[\"Correct enclosure ID\"] = object[0].id == pm.globals.get(\"enclosureID\"); ",
									"",
									"// Test passes if file name and content matches file name and content of recently edited gist",
									"pm.test(\"Correct enclosure content\", function() {",
									"    if (object[0].number == \"001\" && object[0].type == \"jungle\" && object[0].size == 250){",
									"        return true;",
									"    }",
									"\treturn false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{loc_url}}",
							"host": [
								"{{loc_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"pm.test(\"Status 303 See Other: go to Location to check updated object\", function () {",
									"    pm.response.to.have.status(303);",
									"});",
									"",
									"tests[\"Location found: \" + postman.getResponseHeader(\"Location\")] = postman.getResponseHeader(\"Location\");",
									"",
									"postman.setEnvironmentVariable(\"loc_url\", postman.getResponseHeader(\"Location\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Assigned Animal 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confrim correct response code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"for(var i = 0; i < object.length; i++){",
									"    if(object[i].carrier == pm.globals.get(\"enclosureID\")){",
									"        tests[\"Enclosure ID assigned to correct Animal ID\"] = object[i].id == pm.globals.get(\"animalID\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{loc_url}}",
							"host": [
								"{{loc_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Enclosure",
			"item": [
				{
					"name": "Delete All Enclosures ERROR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 405: request method not allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user does not keep this enclosure\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"global_url\", \"{{app_base_url}}/enclosures\");",
									"postman.setEnvironmentVariable(\"user_url\", \"{{app_base_url}}/users/{{userID}}/enclosures\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Deleted Enclosure Global",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"global_url\", body.next);",
									"  postman.setNextRequest(\"Confirm Deleted Enclosure Global\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" enclosure(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) === pm.globals.get(\"numEnclosures\") - 1;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Does not contain most recently deleted enclosure ID\"] = !(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureID\")));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\")+1; i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing enclosure ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") + 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"enclosureArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numEnclosures\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Confirm Deleted Enclosure User\");",
									"    postman.setEnvironmentVariable(\"global_url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{global_url}}",
							"host": [
								"{{global_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Deleted Enclosure User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"user_url\", body.next);",
									"  postman.setNextRequest(\"Confirm Deleted Enclosure User\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" user's enclosure(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) === pm.globals.get(\"numUserEnclosures\")-1;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Does not contain most recently deleted enclosure ID\"] = !(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"enclosureID\")));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\")+1; i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"userEnclosureArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing uer's enclosure ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") - 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"userEnclosureArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numUserEnclosures\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Confirm Animal is No Longer Assigned to Enclosure\");",
									"    postman.setEnvironmentVariable(\"user_url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{user_url}}",
							"host": [
								"{{user_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Animal is No Longer Assigned to Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Pass test if response does not contain most recently deleted gist ID",
									"tests[\"Animal ID's enclosure is now set to null\"] = object.enclosure == null;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Animal",
			"item": [
				{
					"name": "Delete All Animals ERROR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 405: request method not allowed\", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Animal ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Animal ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user does not keep this animal's enclosure\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/5630121163620352",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"5630121163620352"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Animal ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/animals\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Deleted Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body.next);",
									"  postman.setNextRequest(\"Confirm Deleted Animal\");",
									"}",
									"else{",
									"    // Pass test if new count is one greater than global count",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" animals(s)\"] = Number(postman.getEnvironmentVariable(\"count\")) == pm.globals.get(\"numAnimals\")-1;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each animal item has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"    ",
									"    // Pass test if response does not contain most recently deleted gist ID",
									"    tests[\"Does not contain most recently deleted animal ID\"] = !(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"animalID\")));",
									"    ",
									"    // If there is more than 1 gist",
									"    if(postman.getEnvironmentVariable(\"count\") > 1){",
									"        var x = 0;",
									"        for(var i = 0; i < postman.getEnvironmentVariable(\"count\")+1; i++){",
									"            if(postman.getEnvironmentVariable(\"array\").has(pm.globals.get(\"animalArr\")[i])){",
									"                x++;",
									"            }",
									"        }",
									"        // Test passes if response contains all gists in the gistArr",
									"        tests[\"Contains previously existing animal ID(s)\"] = x == postman.getEnvironmentVariable(\"count\") + 1;",
									"    }",
									"    ",
									"    // Reset global array for existing gists",
									"    pm.globals.set(\"animalArr\", postman.getEnvironmentVariable(\"array\"));",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numAnimals\", postman.getEnvironmentVariable(\"count\"));",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Delete User ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete User ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: a user cannot delete a user account\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Deleted User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var count = body.length;",
									"",
									"// Pass test if count of body objects returned is 1 less than the global number of gists",
									"tests[\"Found \" + count + \" users(s)\"] = count == pm.globals.get(\"numUsers\")-1;",
									"",
									"// Pass test if response does not contain most recently deleted gist ID",
									"tests[\"Does not contain most recently deleted user ID\"] = !(responseBody.has(pm.globals.get(\"get-userID\")));",
									"",
									"// If there are any remaining gists",
									"if (count > 0) {",
									"    // Store gist IDs in an array",
									"    var array = [];",
									"    for(var i = 0; i < count; i++){",
									"        array.push(body[i].user_id);",
									"    }",
									"",
									"    // Confirm all other gists still exist",
									"    var x = 0;",
									"    for(var i = 0; i < count + 1; i++) {",
									"        if(responseBody.has(pm.globals.get(\"userArr\")[i])) {",
									"            x++;",
									"        }",
									"    }",
									"    ",
									"    // Pass test if remaining gists still exist",
									"    tests[\"Still contains other previously existing user ID(s)\"] = x == count;",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numUsers\", count);",
									"",
									"    // Reset current gist ID global variable to ID at top of array stack",
									"    pm.globals.set(\"get-userID\", array[0]);",
									"    ",
									"    // Reset global variable for gist array",
									"    pm.globals.set(\"userArr\", array);",
									"    ",
									"    // Print new value for current gist ID",
									"    tests[\"Current user ID is \" + pm.globals.get(\"get-userID\")] = true;",
									"}",
									"else {",
									"    // Reset global variable for current gistId to null",
									"    pm.globals.set(\"get-userID\", null);",
									"    ",
									"    // Reset global variable for gist array to null",
									"    pm.globals.set(\"userArr\", null);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User's Enclosures + Put Animal in Enclosure",
			"item": [
				{
					"name": "User Authorization 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd630147-e6f5-475f-b761-90be0e384558",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 201 Created: Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"tests[\"User ID Token: \" + object.id_token] = true;",
									"",
									"// Save gist's ID to global variable",
									"pm.globals.set(\"auth0_token\", object.id_token);",
									"pm.globals.set(\"userID\", \"32ae107a-6717-43e1-85b4-51aae7a87c81@osu-zoo.com\");",
									"postman.setEnvironmentVariable(\"enclosureID\", \"5667370274127872\");",
									"postman.setEnvironmentVariable(\"animalID\", \"5185395654393856\");",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/users/{{userID}}/enclosures\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"32ae107a-6717-43e1-85b4-51aae7a87c81@osu-zoo.com\",\n\t\"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{app_base_url}}/login",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Enclosures 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45aa1017-35e9-4b52-8eca-dee8f5543411",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status: 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body.items.length);",
									"",
									"tests[\"Content-Type returned is \" + postman.getResponseHeader(\"Content-Type\")] = postman.getResponseHeader(\"Content-Type\"); ",
									"  ",
									"// If there is an existing gist",
									"if(body.items.length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body.items.length; i++) {",
									"        temp.push(body.items[i].id);",
									"        ",
									"        if(body.items[i].self !== 'undefined' && body.items[i].self !== null && body.items[i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body.next) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body.next);",
									"  postman.setNextRequest(\"Get User's Enclosures 3\");",
									"}",
									"else{",
									"    // Print number of gists found.",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" enclosure(s)\"] = true;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each enclosure has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"        ",
									"    if(postman.getEnvironmentVariable(\"count\") > 0){",
									"        // Print gist ID at the top of the array stack",
									"        tests[\"Current user enclosure ID is \" + JSON.parse(postman.getEnvironmentVariable(\"array\"))[0]] = true;",
									"    ",
									"        // Set global variable for gist array",
									"        pm.globals.set(\"userEnclosureArr\", JSON.parse(postman.getEnvironmentVariable(\"array\")));",
									"    ",
									"        // Set global variable for number of gists",
									"        pm.globals.set(\"numUserEnclosures\", Number(postman.getEnvironmentVariable(\"count\")));",
									"    }",
									"    else{",
									"        // Set global variable for gist array to null",
									"        pm.globals.set(\"userEnclosureArr\", null);",
									"    ",
									"        // Set global variable for number of gists to ",
									"        pm.globals.set(\"numUserEnclosures\", 0);",
									"    }",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Put Animal in Enclosure ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Not Found: Unsuccessful PUT, animal ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/1234123412341234",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"1234123412341234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful PUT, invalid animal ID\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/123412341234123",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"123412341234123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful PUT, invalid enclosure ID\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/12341234123/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"12341234123",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Not Found: Unsuccessful PUT, enclosure ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/1234123412341234/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"1234123412341234",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: missing credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: user credentials do not own this enclosure\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure ERROR 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: animal currently lives in another keeper's enclosure\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/5645015573331968",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"5645015573331968"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Animal in Enclosure 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"pm.test(\"Status 303 See Other: got to Location to check udpated object\", function () {",
									"    pm.response.to.have.status(303);",
									"});",
									"",
									"tests[\"Location found: \" + postman.getResponseHeader(\"Location\")] = postman.getResponseHeader(\"Location\");",
									"",
									"postman.setEnvironmentVariable(\"loc_url\", postman.getResponseHeader(\"Location\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Assigned Animal 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confrim correct response code",
									"pm.test(\"Status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"for(var i = 0; i < object.length; i++){",
									"    if(object[i].carrier == pm.globals.get(\"enclosureID\")){",
									"        tests[\"Enclosure ID assigned to correct Animal ID\"] = object[i].id == pm.globals.get(\"animalID\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{loc_url}}",
							"host": [
								"{{loc_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Enclosure Animals + Remove Animal from Enclosure",
			"item": [
				{
					"name": "Get Enclosure Animals 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"var temp = [];",
									"",
									"// Parse JSON response",
									"postman.setEnvironmentVariable(\"url\", \"{{app_base_url}}/enclosures/{{enclosureID}}/animals\");",
									"postman.setEnvironmentVariable(\"pag#\", 0);",
									"postman.setEnvironmentVariable(\"selfs\", 0);",
									"postman.setEnvironmentVariable(\"count\", 0);",
									"postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"postman.setNextRequest(\"Get Enclosure Animals 2\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Enclosure Animals 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confrim correct response code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var temp = JSON.parse(postman.getEnvironmentVariable(\"array\"));",
									"",
									"postman.setEnvironmentVariable(\"count\", Number(postman.getEnvironmentVariable(\"count\")) + body['items'].length);",
									"  ",
									"// If there is an existing gist",
									"if(body['items'].length > 0){",
									"    // Store gist IDs into an array",
									"    for(var i = 0; i < body['items'].length; i++) {",
									"        temp.push(body['items'][i].id);",
									"        ",
									"        if(body['items'][i].self !== 'undefined' && body['items'][i].self !== null && body['items'][i].self !== \"\"){",
									"            postman.setEnvironmentVariable(\"selfs\", Number(postman.getEnvironmentVariable(\"selfs\")) + 1);",
									"        }",
									"    }",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}",
									"",
									"if(typeof(body['next']) !== 'undefined') {  ",
									"  postman.setEnvironmentVariable(\"pag#\", Number(postman.getEnvironmentVariable(\"pag#\")) + 1);",
									"  ",
									"  // replace the URL variable used for the request with the value of pageUrl",
									"  postman.setEnvironmentVariable(\"url\", body['next']);",
									"  postman.setNextRequest(\"Get Enclosure Animals 2\");",
									"}",
									"else{",
									"    // Print number of gists found.",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"count\") + \" animals(s)\"] = true;",
									"    ",
									"    tests[\"Found \" + postman.getEnvironmentVariable(\"pag#\") + \" pagination link(s)\"] = true;",
									"    ",
									"    tests[\"Correct number of pagination links\"] = Math.trunc(Number(postman.getEnvironmentVariable(\"count\")) / 5) == Number(postman.getEnvironmentVariable(\"pag#\"));",
									"    ",
									"    tests[\"Each animal has a self link\"] = Number(postman.getEnvironmentVariable(\"count\")) == Number(postman.getEnvironmentVariable(\"selfs\"));",
									"        ",
									"    if(postman.getEnvironmentVariable(\"count\") > 0){",
									"        // Set global variable for gist array",
									"        pm.globals.set(\"animalArr\", JSON.parse(postman.getEnvironmentVariable(\"array\")));",
									"    }",
									"    else{",
									"        // Set global variable for gist array to null",
									"        pm.globals.set(\"animalArr\", null);",
									"    }",
									"    ",
									"    temp = [];",
									"    postman.setNextRequest(\"Remove Animal from Enclosure ERROR 1\");",
									"    postman.setEnvironmentVariable(\"url\", null);",
									"    postman.setEnvironmentVariable(\"pag#\", 0);",
									"    postman.setEnvironmentVariable(\"selfs\", 0);",
									"    postman.setEnvironmentVariable(\"count\", 0);",
									"    postman.setEnvironmentVariable(\"array\", JSON.stringify(temp));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: Unsuccessful DELETE, missing credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 401 Unauthorized: Unsuccessful DELETE, invalid credentials\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Nnot Found: Unsuccessful DELETE, enclosure ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/1234123412341234/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"1234123412341234",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 404 Not Found: Unsuccessful DELETE, animal ID not found\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/1234123412341234",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"1234123412341234"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 403 Forbidden: Unsuccessful DELETE, animal is being kept in another enclosure\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/5735393697726464",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"5735393697726464"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 406 Not Accepted: server only uses application/json\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure ERROR 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"pm.test(\"Status 401 Unauthorized: user does not own this enclosure\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{2_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Animal from Enclosure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11faa26-87cc-4938-a945-28609ae5f675",
								"exec": [
									"pm.test(\"Status 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/enclosures/{{enclosureID}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"enclosures",
								"{{enclosureID}}",
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Removed Animal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6a125b-4695-4c0f-9dbb-8191cd0880c7",
								"exec": [
									"// Confrim correct response code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var object = JSON.parse(responseBody);",
									"",
									"// Pass test if response does not contain most recently deleted gist ID",
									"tests[\"Enclosure ID not found in Animal ID\"] = !(responseBody.has(pm.globals.get(\"enclosureID\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth0_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/animals/{{animalID}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"animals",
								"{{animalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a08cab-c374-4ff4-a6e4-abfeb5e15a51",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users/{{get-userID_2}}",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users",
								"{{get-userID_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Deleted User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e856c3-36fc-45fd-9cba-7254596db301",
								"exec": [
									"// Confirm correct status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse JSON response",
									"var body = JSON.parse(responseBody);",
									"var count = body.length;",
									"",
									"// Pass test if count of body objects returned is 1 less than the global number of gists",
									"tests[\"Found \" + count + \" users(s)\"] = count == pm.globals.get(\"numUsers\")-1;",
									"",
									"// Pass test if response does not contain most recently deleted gist ID",
									"tests[\"Does not contain most recently deleted user ID\"] = !(responseBody.has(pm.globals.get(\"get-userID\")));",
									"",
									"// If there are any remaining gists",
									"if (count > 0) {",
									"    // Store gist IDs in an array",
									"    var array = [];",
									"    for(var i = 0; i < count; i++){",
									"        array.push(body[i].user_id);",
									"    }",
									"",
									"    // Confirm all other gists still exist",
									"    var x = 0;",
									"    for(var i = 0; i < count + 1; i++) {",
									"        if(responseBody.has(pm.globals.get(\"userArr\")[i])) {",
									"            x++;",
									"        }",
									"    }",
									"    ",
									"    // Pass test if remaining gists still exist",
									"    tests[\"Still contains other previously existing user ID(s)\"] = x == count;",
									"    ",
									"    // Reset global count of gists",
									"    pm.globals.set(\"numUsers\", count);",
									"",
									"    // Reset current gist ID global variable to ID at top of array stack",
									"    pm.globals.set(\"get-userID\", array[0]);",
									"    ",
									"    // Reset global variable for gist array",
									"    pm.globals.set(\"userArr\", array);",
									"    ",
									"    // Print new value for current gist ID",
									"    tests[\"Current user ID is \" + pm.globals.get(\"get-userID\")] = true;",
									"}",
									"else {",
									"    // Reset global variable for current gistId to null",
									"    pm.globals.set(\"get-userID\", null);",
									"    ",
									"    // Reset global variable for gist array to null",
									"    pm.globals.set(\"userArr\", null);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{client_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{app_base_url}}/users",
							"host": [
								"{{app_base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth0_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "73d0902f-3027-49a3-8cde-b0d2a2950f41",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4e1c68d0-76f5-4fb6-a605-473c6ef1a5ca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}